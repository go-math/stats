package correlation

import (
	"math"
	"testing"

	"github.com/ready-steady/assert"
)

func TestDecompose(t *testing.T) {
	m := uint(5)
	ε := math.Sqrt(math.Nextafter(1.0, 2.0) - 1.0)

	Σ := []float64{
		+1.000000000000000e+00,
		+1.154127058177033e-01,
		+3.134709671301593e-01,
		-2.624605475789556e-01,
		-2.675628902376415e-01,
		+1.154127058177033e-01,
		+1.000000000000000e+00,
		+1.487775664601468e-01,
		+8.251722261621278e-01,
		+6.471493243665016e-01,
		+3.134709671301593e-01,
		+1.487775664601468e-01,
		+1.000000000000000e+00,
		+2.188948568766876e-01,
		-4.746506616202846e-01,
		-2.624605475789556e-01,
		+8.251722261621278e-01,
		+2.188948568766876e-01,
		+1.000000000000000e+00,
		+7.047860759340304e-01,
		-2.675628902376415e-01,
		+6.471493243665017e-01,
		-4.746506616202846e-01,
		+7.047860759340304e-01,
		+1.000000000000000e+00,
	}

	expectedC := []float64{
		-2.809842768614861e-01,
		+8.627295633325639e-01,
		-1.214267186196807e-01,
		+9.269379853101427e-01,
		+8.961281861000945e-01,
		+6.515118812441264e-01,
		+3.964760087163447e-01,
		+8.860907779360867e-01,
		+2.468650308871921e-01,
		-3.127013101588838e-01,
		+6.984395695466264e-01,
		+1.766729460543113e-01,
		-4.356464873918021e-01,
		-2.493887459101609e-01,
		+2.478421563724771e-01,
		-9.023381630769038e-02,
		+2.584336847835331e-01,
		-8.530725532353041e-02,
		-1.023061219107812e-01,
		-1.828307777260400e-01,
		+2.490242639661812e-02,
		-2.243157966027762e-02,
		-5.507717743518731e-02,
		+8.474867991403982e-02,
		-6.572166265854235e-02,
	}

	expectedD := []float64{
		-1.123820829831357e-01,
		+4.270690437671776e-01,
		+8.390274190151508e-01,
		-7.155673852439032e-01,
		+1.590347846170451e+00,
		+3.450561236429604e-01,
		+2.598918527714004e-01,
		+2.122351773883221e-01,
		+2.049416988514750e+00,
		-1.432551745390084e+00,
		-4.856566253710289e-02,
		+5.808365927286619e-01,
		-5.233371129826270e-01,
		-6.764990347525633e-01,
		-3.517403047885066e+00,
		+3.707368353450518e-01,
		+1.618211666059287e-01,
		-2.995878311251075e-01,
		-8.113025376263803e-01,
		+5.412319202171648e+00,
		+3.584141906398315e-01,
		-2.049771513902104e-01,
		+2.977299309077400e-01,
		-1.449874857486012e+00,
		-4.197193598369533e+00,
	}

	C, D, _, _, _ := Decompose(Σ, m, 1.0, ε)

	assert.Close(abs(C), abs(expectedC), 1e-14, t)
	assert.Close(abs(D), abs(expectedD), 1e-13, t)

	C, D, _, _, _ = Decompose(Σ, m, 0.75, ε)

	assert.Close(abs(C), abs(expectedC[:m*2]), 1e-14, t)
	assert.Close(abs(D), abs(slice(expectedD, m, m, 2)), 1e-13, t)
}

func abs(data []float64) []float64 {
	data = append([]float64(nil), data...)
	for i := range data {
		if data[i] < 0.0 {
			data[i] *= -1.0
		}
	}
	return data
}

func slice(data []float64, m, n, p uint) []float64 {
	result := make([]float64, p*n)
	for i := uint(0); i < p; i++ {
		for j := uint(0); j < n; j++ {
			result[j*p+i] = data[j*m+i]
		}
	}
	return result
}
